{"version":3,"sources":["components/ClassCard.js","components/ClassList.js","components/StudentDisplay.js","components/ClassPage.js","App.js","index.js"],"names":["Class","classInfo","setSelectedClass","selectedClass","deleteClass","className","id","roster","length","onClick","to","ClassList","classList","setClassList","useState","newClass","setNewClass","toggleAddClassModal","addClassModal","document","querySelector","style","display","newClassList","filter","map","type","placeholder","onChange","event","target","value","StudentDisplay","selectedStudent","setSelectedStudent","calculateLevel","points","Math","floor","calculatePercentToNextLevel","undefined","name","console","log","Progress","progress","percent","studentName","studentClassId","classId","student","ClassPage","newStudent","setNewStudent","useEffect","find","studentNameInput","level","addStudent","studentModal","toggleStudentModal","App","basename","exact","path","render","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d21fe412.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Class({classInfo, selectedClass, setSelectedClass, deleteClass}) {\r\n    const selectClass = () => {\r\n        setSelectedClass(classInfo)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"content\">\r\n                <div className=\"header\">\r\n                    {classInfo.id}\r\n                </div>\r\n                <div className=\"meta\">\r\n                    Students: {classInfo.roster.length}\r\n                </div>\r\n                <div className=\"extra content\">\r\n                    <div className=\"ui two buttons\">\r\n                        <div className=\"ui basic green button\" onClick={() => selectClass()}><Link to=\"/classpage\">View Class</Link></div>\r\n                        <div className=\"ui basic red button\" onClick={() => deleteClass(classInfo.id)}>Delete Class</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport ClassCard from './ClassCard';\r\nimport './ClassList.css';\r\n\r\nexport default function ClassList({classList, setClassList, selectedClass, setSelectedClass}) {\r\n    const [newClass, setNewClass] = useState('')\r\n\r\n    const toggleAddClassModal = () => {\r\n        //Create modal with form to enter class information\r\n        const addClassModal = document.querySelector('.classModal');\r\n        if (addClassModal.style.display !== \"block\") {\r\n            addClassModal.style.display = \"block\";\r\n          } else {\r\n            addClassModal.style.display = \"none\";\r\n          }\r\n    }\r\n\r\n    const addClass = () => {\r\n        //add class to classList\r\n        if(newClass !== '') {\r\n            setClassList([\r\n                ...classList,\r\n                {\r\n                    id: newClass,\r\n                    roster: []\r\n                }\r\n            ])\r\n            // clear input value\r\n            const classTitleInput = document.querySelector('.classTitleInput');\r\n            classTitleInput.value = '';\r\n            // hide addClassModal\r\n            toggleAddClassModal();\r\n            // Change newClass to an empty string\r\n            setNewClass('');\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const deleteClass = (id) => {\r\n        // create new array without the class that user wants to delete\r\n        const newClassList = classList.filter((classInfo) => classInfo.id !== id);\r\n        // set the new array without the deleted array as the classList\r\n        setClassList(newClassList);\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainContent\">\r\n        <h1>Welcome, Teacher!</h1>\r\n            <div className=\"ui cards classListContainer\">\r\n                {classList.map((classInfo) => {\r\n                    return (\r\n                        <ClassCard key={classInfo.id} classInfo={classInfo} deleteClass={deleteClass} \r\n                        selectedClass={selectedClass} setSelectedClass={setSelectedClass} />\r\n                    )\r\n                })}\r\n            </div>\r\n            <button className='addClassButton' onClick={() => toggleAddClassModal()}>\r\n                Add Class\r\n            </button>\r\n            <div className=\"modal classModal\">\r\n                <div className=\"modalContent\">\r\n                    <label>Class Title</label>\r\n                    <input type=\"text\" placeholder=\"(ex: AB2)\" className='classTitleInput'\r\n                            onChange={(event) => setNewClass(event.target.value)} />\r\n                </div>\r\n                    <button onClick={() => addClass()}>Add</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './StudentDisplay.css';\r\nimport { Progress } from 'semantic-ui-react';\r\n\r\n/* eslint-disable */\r\n//Disabled eslint because no-unused-expressions was not letting my program run\r\nexport default function StudentDisplay({selectedStudent, setSelectedStudent, roster, classList, setClassList, selectedClass }) {\r\n    const calculateLevel = (points) => {\r\n        return Math.floor(points/100)\r\n    }\r\n\r\n    const calculatePercentToNextLevel = (points) => {\r\n        return points - (calculateLevel(points)*100);\r\n    }\r\n\r\n    const addPoint = (studentName, studentClassId) => {\r\n            console.log(selectedClass)\r\n            // Set classList to update points of selectedStudent\r\n            setClassList(\r\n                classList.map((classInfo) => {\r\n                // Find the class with the same id as the selectedStudent\r\n                    if(classInfo.id === studentClassId) {\r\n                        // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                        // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                            return (\r\n                                {\r\n                                    roster: [\r\n                                        classInfo.roster.map((student) => {\r\n                                            student.name === studentName\r\n                                            ?\r\n                                                    {\r\n                                                        points: student.points++,\r\n                                                        ...student\r\n                                                    }\r\n                                            :\r\n                                                    { ...student }\r\n                                            }\r\n                                        )\r\n                                    ],\r\n                                    // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                    ...classInfo\r\n                                })\r\n                            } else {\r\n                                return (\r\n                                    { ...classInfo }\r\n                                )\r\n                            }\r\n                        }))\r\n                        console.log(selectedClass)\r\n        };\r\n\r\n    const subtractPoint = (studentName, studentClassId) => {\r\n        console.log(selectedClass)\r\n        // Set classList to update points of selectedStudent\r\n        setClassList(\r\n            classList.map((classInfo) => {\r\n            // Find the class with the same id as the selectedStudent\r\n                if(classInfo.id === studentClassId) {\r\n                    // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                    // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                        return (\r\n                            {\r\n                                roster: [\r\n                                    classInfo.roster.map((student) => {\r\n                                        student.name === studentName\r\n                                        ?\r\n                                                {\r\n                                                    points: student.points--,\r\n                                                    ...student\r\n                                                }\r\n                                        :\r\n                                                { ...student }\r\n                                        }\r\n                                    )\r\n                                ],\r\n                                // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                ...classInfo\r\n                            })\r\n                        } else {\r\n                            return (\r\n                                { ...classInfo }\r\n                            )\r\n                        }\r\n                    }))\r\n                    console.log(selectedClass)\r\n    };\r\n\r\n    if(selectedStudent.name !== undefined) {\r\n        console.log(selectedStudent)\r\n        return (\r\n            <div className='studentDisplay'>\r\n                <h2>{calculateLevel(selectedStudent.points)}</h2>\r\n                    {selectedStudent.name}\r\n                    <Progress progress percent={calculatePercentToNextLevel(selectedStudent.points)} />\r\n                    <button onClick={() => subtractPoint(selectedStudent.name, selectedStudent.classId)}>-</button>\r\n                    <button onClick={() => addPoint(selectedStudent.name, selectedStudent.classId)}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className='studentDisplay'>\r\n                {roster.map((student) => {\r\n                    return (\r\n                        <div key={student.name}>\r\n                            {calculateLevel(student.points)} {student.name} <Progress progress percent={calculatePercentToNextLevel(student.points)} />\r\n                        </div>\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './ClassPage.css';\r\nimport { useState, useEffect } from 'react';\r\nimport StudentDisplay from './StudentDisplay';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function ClassPage({selectedClass, setSelectedClass, classList, setClassList}) {\r\n    const [newStudent, setNewStudent] = useState('');\r\n    const [selectedStudent, setSelectedStudent] = useState({});\r\n    \r\n    const toggleStudentModal = () => {\r\n        const studentModal = document.querySelector('.studentModal');\r\n        if(studentModal.style.display !== 'block') {\r\n            studentModal.style.display = 'block';\r\n        } else {\r\n            studentModal.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    const addStudent = () => {\r\n        const studentNameInput = document.querySelector('.studentNameInput');\r\n        // only add student if input is not blank\r\n        if(studentNameInput.value !== '') {\r\n            // Set classList to include new student in the selectedClass\r\n            setClassList(\r\n                classList.map((classInfo) => \r\n                // Find the class with the same id as the selectedClass being displayed on this page\r\n                    classInfo.id === selectedClass.id \r\n                    ? {\r\n                        ...classInfo,\r\n                        roster: [\r\n                            // Add the new student to the roster\r\n                            ...classInfo.roster,\r\n                            {\r\n                                name: newStudent,\r\n                                points: 0,\r\n                                level: 0,\r\n                                classId: selectedClass.id\r\n                            }\r\n                        ]\r\n                    }\r\n                    : { ...classInfo }\r\n                )\r\n            );\r\n            // Set input text to blank\r\n            studentNameInput.value = '';\r\n            setNewStudent('');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Whenever classList is updated, update selectedClass for any changes in the roster (when a new student is added)\r\n        setSelectedClass(classList.find((classInfo) => {\r\n            return classInfo.id === selectedClass.id;\r\n        }));\r\n    }, [classList])\r\n\r\n    return (\r\n        <div className='container'>\r\n            <nav>\r\n                <span><Link to=\"/\">Home</Link></span>\r\n            </nav>\r\n            <h1>{selectedClass.id}</h1>\r\n            <div className='classContent'>\r\n                <div className='roster'>\r\n                <div className='student' onClick={() => setSelectedStudent(selectedClass.roster)}>All</div>\r\n                    {selectedClass.roster.map((student) => {\r\n                        return (\r\n                            <div key={student.name} className='student' onClick={() => setSelectedStudent(student)}>{student.name}</div>\r\n                        )\r\n                    })}\r\n                    <div className=\"modal studentModal\">\r\n                        <div className=\"modalContent\">\r\n                            <label>Student Name</label>\r\n                            <input type=\"text\" placeholder=\"\" className='studentNameInput'\r\n                                    onChange={(event) => setNewStudent(event.target.value)} />\r\n                        </div>\r\n                            <button onClick={() => addStudent()}>Add</button>\r\n                    </div>\r\n                    <button onClick={() => toggleStudentModal()}>Add Student</button>\r\n                </div>\r\n                <StudentDisplay selectedStudent={selectedStudent} setSelectedStudent={setSelectedStudent} roster={selectedClass.roster}\r\n                                classList={classList} setClassList={setClassList} selectedClass={selectedClass} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import 'semantic-ui-css/semantic.min.css';\nimport ClassList from './components/ClassList';\nimport { useState } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport ClassPage from './components/ClassPage';\n\nfunction App() {\n  const [classList, setClassList] = useState([\n    {\n        id: 'AB2',\n        roster: [\n            {\n                name: 'Hans',\n                points: 545,\n                classId: 'AB2'\n            },\n            {\n                name: 'Tammy',\n                points: 233,\n                classId: 'AB2'\n            },\n            {\n                name: 'Yuni',\n                points: 94,\n                classId: 'AB2'\n            },\n            {\n                name: 'Nina',\n                points: 333,\n                classId: 'AB2'\n            },\n        ]\n    },\n    {\n        id: 'ED1',\n        roster: [\n            {\n                name: 'Ivan',\n                points: 784,\n                classId: 'ED1'\n            },\n            {\n                name: 'Fifi',\n                points: 3,\n                classId: 'ED1'\n            },\n            {\n                name: 'Peter',\n                points: 777,\n                classId: 'ED1'\n            }\n        ]\n    }\n  ]);\n\n  const [selectedClass, setSelectedClass] = useState({});\n\n    return (\n     <HashRouter basename='/'>\n       <Route exact path=\"/\" render={() => <ClassList classList={classList} setClassList={setClassList}\n                                            setSelectedClass={setSelectedClass} />} />\n       <Route path='/classpage' render={() => <ClassPage selectedClass={selectedClass} setSelectedClass={setSelectedClass}\n                                            classList={classList} setClassList={setClassList} />} />\n     </HashRouter>\n    );\n   }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}