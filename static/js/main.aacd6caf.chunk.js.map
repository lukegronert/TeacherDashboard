{"version":3,"sources":["components/ClassCard.js","components/ClassList.js","images/0.jpg","images/1.jpg","images/2.jpg","images/3.jpg","images/4.jpg","images/5.jpg","components/StudentDisplay.js","components/ClassPage.js","App.js","index.js"],"names":["Class","classInfo","setSelectedClass","deleteClass","updateSelectedClassLocalStorage","className","id","roster","length","to","onClick","ClassList","classList","setClassList","selectedClass","updateClassListLocalStorage","useState","newClass","setNewClass","toggleAddClassModal","addClassModal","document","querySelector","style","display","addClass","value","newClassList","filter","useEffect","map","type","placeholder","onChange","event","target","StudentDisplay","selectedStudent","deleteStudent","calculateLevel","points","Math","floor","calculatePercentToNextLevel","mobileDisplayRoster","studentDisplay","numberImages","number0","number1","number2","number3","number4","number5","undefined","name","studentLevel","levelImg","src","alt","Progress","progress","percent","studentName","studentClassId","classId","student","ClassPage","newStudent","setNewStudent","setSelectedStudent","toggleStudentModal","studentModal","displayMobileStudentDisplay","window","screen","width","addStudent","studentNameInput","level","newClassRoster","setTimeout","find","App","localStorage","getItem","JSON","parse","setItem","stringify","basename","exact","path","render","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aacd6caf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Class({classInfo, setSelectedClass, deleteClass, updateSelectedClassLocalStorage}) {\r\n    const selectClass = () => {\r\n        setSelectedClass(classInfo)\r\n        // Sets the localstorage value of selectedClass to the class that the user chose to view\r\n        updateSelectedClassLocalStorage(classInfo)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"content\">\r\n                <div className=\"header\">\r\n                    {classInfo.id}\r\n                </div>\r\n                <div className=\"meta\">\r\n                    Students: {classInfo.roster.length}\r\n                </div>\r\n                <div className=\"extra content\">\r\n                    <div className=\"ui two buttons\">\r\n                        <Link to=\"/classpage\"><div className=\"ui basic green button\" onClick={() => selectClass()}>View Class</div></Link>\r\n                        <div className=\"ui basic red button\" onClick={() => deleteClass(classInfo.id)}>Delete Class</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport ClassCard from './ClassCard';\r\nimport './ClassList.css';\r\n\r\nexport default function ClassList({classList, setClassList, selectedClass, setSelectedClass, updateClassListLocalStorage, updateSelectedClassLocalStorage}) {\r\n    const [newClass, setNewClass] = useState('')\r\n\r\n    const toggleAddClassModal = () => {\r\n        //Create modal with form to enter class information\r\n        const addClassModal = document.querySelector('.classModal');\r\n        if (addClassModal.style.display !== \"block\") {\r\n            addClassModal.style.display = \"block\";\r\n          } else {\r\n            addClassModal.style.display = \"none\";\r\n          }\r\n    }\r\n\r\n    const addClass = () => {\r\n        //add class to classList\r\n        if(newClass !== '') {\r\n            setClassList([\r\n                ...classList,\r\n                {\r\n                    id: newClass,\r\n                    roster: []\r\n                }\r\n            ])\r\n            // clear input value\r\n            const classTitleInput = document.querySelector('.classTitleInput');\r\n            classTitleInput.value = '';\r\n            // hide addClassModal\r\n            toggleAddClassModal();\r\n            // Change newClass to an empty string\r\n            setNewClass('');\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const deleteClass = (id) => {\r\n        // create new array without the class that user wants to delete\r\n        const newClassList = classList.filter((classInfo) => classInfo.id !== id);\r\n        // set the new array without the deleted array as the classList\r\n        setClassList(newClassList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateClassListLocalStorage()\r\n    }, [classList])\r\n\r\n    if(classList.length !== null) {\r\n        return (\r\n            <div className=\"mainContent\">\r\n            <h1>Welcome, Teacher!</h1>\r\n                <div className=\"ui cards classListContainer\">\r\n                    {classList.map((classInfo) => {\r\n                        return (\r\n                            <ClassCard key={classInfo.id} classInfo={classInfo} deleteClass={deleteClass} \r\n                            setSelectedClass={setSelectedClass} updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className='addClassButton' onClick={() => toggleAddClassModal()}>\r\n                    Add Class\r\n                </button>\r\n                <div className=\"modal classModal\">\r\n                    <div className=\"modalContent\">\r\n                        <label>Class Title</label>\r\n                        <input type=\"text\" placeholder=\"(ex: AB2)\" className='classTitleInput'\r\n                                onChange={(event) => setNewClass(event.target.value)} />\r\n                    </div>\r\n                        <button onClick={() => addClass()}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"mainContent\">\r\n                <h1>Welcome, Teacher!</h1>\r\n                <button className='addClassButton' onClick={() => toggleAddClassModal()}>\r\n                    Add Class\r\n                </button>\r\n                <div className=\"modal classModal\">\r\n                    <div className=\"modalContent\">\r\n                        <label>Class Title</label>\r\n                        <input type=\"text\" placeholder=\"(ex: AB2)\" className='classTitleInput'\r\n                                onChange={(event) => setNewClass(event.target.value)} />\r\n                    </div>\r\n                        <button onClick={() => addClass()}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/0.3a3ea370.jpg\";","export default __webpack_public_path__ + \"static/media/1.6ac1f1f9.jpg\";","export default __webpack_public_path__ + \"static/media/2.9da0f13b.jpg\";","export default __webpack_public_path__ + \"static/media/3.c261bf2e.jpg\";","export default __webpack_public_path__ + \"static/media/4.bb1fdc33.jpg\";","export default __webpack_public_path__ + \"static/media/5.3951d5b6.jpg\";","import React from 'react';\r\nimport './StudentDisplay.css';\r\nimport { Progress } from 'semantic-ui-react';\r\nimport number0 from '../images/0.jpg';\r\nimport number1 from '../images/1.jpg';\r\nimport number2 from '../images/2.jpg';\r\nimport number3 from '../images/3.jpg';\r\nimport number4 from '../images/4.jpg';\r\nimport number5 from '../images/5.jpg';\r\n\r\n/* eslint-disable */\r\n//Disabled eslint because no-unused-expressions was not letting my program run\r\nexport default function StudentDisplay({selectedStudent, roster, classList, setClassList, updateClassListLocalStorage, deleteStudent }) {\r\n    const calculateLevel = (points) => {\r\n        return Math.floor(points/100)\r\n    }\r\n\r\n    const calculatePercentToNextLevel = (points) => {\r\n        return points - (calculateLevel(points)*100);\r\n    }\r\n\r\n    const addPoint = (studentName, studentClassId) => {\r\n            // Set classList to update points of selectedStudent\r\n            setClassList(\r\n                classList.map((classInfo) => {\r\n                // Find the class with the same id as the selectedStudent\r\n                    if(classInfo.id === studentClassId) {\r\n                        // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                        // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                            return (\r\n                                {\r\n                                    roster: [\r\n                                        classInfo.roster.map((student) => {\r\n                                            // check if student is the student use as a param\r\n                                            student.name === studentName\r\n                                            ?\r\n                                                //if it is, add 1 to the points of the student\r\n                                                    {\r\n                                                        points: student.points++,\r\n                                                        //keep other info the same\r\n                                                        ...student\r\n                                                    }\r\n                                            :\r\n                                                    //if it is a different student, return student info\r\n                                                    { ...student }\r\n                                            }\r\n                                        )\r\n                                    ],\r\n                                    // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                    ...classInfo\r\n                                })\r\n                            } else {\r\n                                return (\r\n                                    { ...classInfo }\r\n                                )\r\n                            }\r\n                        }))\r\n                        updateClassListLocalStorage()\r\n        };\r\n\r\n    const subtractPoint = (studentName, studentClassId) => {\r\n        // Set classList to update points of selectedStudent\r\n        setClassList(\r\n            classList.map((classInfo) => {\r\n            // Find the class with the same id as the selectedStudent\r\n                if(classInfo.id === studentClassId) {\r\n                    // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                    // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                        return (\r\n                            {\r\n                                roster: [\r\n                                    classInfo.roster.map((student) => {\r\n                                        student.name === studentName\r\n                                        ?\r\n                                                {\r\n                                                    points: student.points--,\r\n                                                    ...student\r\n                                                }\r\n                                        :\r\n                                                { ...student }\r\n                                        }\r\n                                    )\r\n                                ],\r\n                                // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                ...classInfo\r\n                            })\r\n                        } else {\r\n                            return (\r\n                                { ...classInfo }\r\n                            )\r\n                        }\r\n                    }))\r\n                    updateClassListLocalStorage()\r\n    };\r\n\r\n    const mobileDisplayRoster = () => {\r\n        const roster = document.querySelector('.roster');\r\n        const studentDisplay = document.querySelector('.studentDisplay');\r\n        if(roster.style.display === 'none') {\r\n            roster.style.display = 'block';\r\n            studentDisplay.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    // Object with all numberImage variables\r\n    const numberImages = {\r\n        '0': number0,\r\n        '1': number1,\r\n        '2': number2,\r\n        '3': number3,\r\n        '4': number4,\r\n        '5': number5\r\n    }\r\n\r\n        // Use numberImages[studentLevel] to select the correct image variable to use for the studentDisplay img\r\n    if(selectedStudent.name !== undefined) {\r\n        const studentLevel = calculateLevel(selectedStudent.points);\r\n        let levelImg = numberImages[studentLevel];\r\n        return (\r\n            <div className='studentDisplay'>\r\n                <img src={levelImg} alt='number 1' />\r\n                <div className='studentContent'>\r\n                    <h2>{selectedStudent.name}</h2>\r\n                    <div className='progressBarDiv'>\r\n                        {studentLevel}<Progress progress percent={calculatePercentToNextLevel(selectedStudent.points)} />{studentLevel + 1}\r\n                    </div>\r\n                    <div className='pointsButtons'>\r\n                        <button onClick={() => subtractPoint(selectedStudent.name, selectedStudent.classId)}>-</button>\r\n                        <button onClick={() => addPoint(selectedStudent.name, selectedStudent.classId)}>+</button>\r\n                    </div>\r\n                    <button onClick={() => deleteStudent(selectedStudent.name)}>Delete</button>\r\n                    <button onClick={() => mobileDisplayRoster()} className='backButton'>Back</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    if(selectedStudent === roster || selectedStudent.name === undefined) {\r\n        return (\r\n            <div className='studentDisplay'>\r\n                    {roster.map((student) => {\r\n                        return (\r\n                            <div key={student.name}>\r\n                                {calculateLevel(student.points)} {student.name} <Progress progress percent={calculatePercentToNextLevel(student.points)} />\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <button onClick={() => mobileDisplayRoster()} className='backButton'>Back</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './ClassPage.css';\r\nimport { useState, useEffect } from 'react';\r\nimport StudentDisplay from './StudentDisplay';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/* eslint-disable */\r\n//Disabled eslint because no-unused-expressions was not letting my program run\r\nexport default function ClassPage({selectedClass, setSelectedClass, classList, setClassList, updateClassListLocalStorage}) {\r\n    const [newStudent, setNewStudent] = useState('');\r\n    const [selectedStudent, setSelectedStudent] = useState({});\r\n    \r\n    const toggleStudentModal = () => {\r\n        const studentModal = document.querySelector('.studentModal');\r\n        if(studentModal.style.display !== 'block') {\r\n            studentModal.style.display = 'block';\r\n        } else {\r\n            studentModal.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    const displayMobileStudentDisplay = (student) => {\r\n        const studentDisplay = document.querySelector('.studentDisplay');\r\n        const roster = document.querySelector('.roster');\r\n        if(window.screen.width < 601) {\r\n            studentDisplay.style.display= 'block';\r\n            roster.style.display = 'none';\r\n        }\r\n        setSelectedStudent(student)\r\n    }\r\n\r\n    const addStudent = () => {\r\n        const studentNameInput = document.querySelector('.studentNameInput');\r\n        // only add student if input is not blank\r\n        if(studentNameInput.value !== '') {\r\n            // Set classList to include new student in the selectedClass\r\n            setClassList(\r\n                classList.map((classInfo) => \r\n                // Find the class with the same id as the selectedClass being displayed on this page\r\n                    classInfo.id === selectedClass.id \r\n                    ? {\r\n                        ...selectedClass,\r\n                        roster: [\r\n                            // Add the new student to the roster\r\n                            ...selectedClass.roster,\r\n                            {\r\n                                name: newStudent,\r\n                                points: 0,\r\n                                level: 0,\r\n                                classId: selectedClass.id\r\n                            }\r\n                        ]\r\n                    }\r\n                    : { ...classInfo }\r\n                )\r\n            );\r\n            // Set input text to blank\r\n            studentNameInput.value = '';\r\n            setNewStudent('');\r\n            updateClassListLocalStorage()\r\n        }\r\n    };\r\n\r\n    const deleteStudent = (studentName) => {\r\n        // create new array without the class that user wants to delete\r\n        const newClassRoster = selectedClass.roster.filter((student) => student.name !== studentName);\r\n        // set the new array without the deleted array as the classList\r\n        setSelectedClass({\r\n            ...selectedClass,\r\n            roster: [\r\n                ...newClassRoster\r\n            ]\r\n        })\r\n        setClassList(\r\n            classList.map((classInfo) => \r\n            // Find the class with the same id as the selectedClass being displayed on this page\r\n                classInfo.id === selectedClass.id \r\n                ? {\r\n                    ...selectedClass,\r\n                    roster: [\r\n                        ...newClassRoster\r\n                    ]\r\n                }\r\n                : { ...classInfo }\r\n            )\r\n        )\r\n        setTimeout(() => {\r\n            setSelectedStudent({})\r\n        }, 100)\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Whenever classList is updated, update selectedClass for any changes in the roster (when a new student is added)\r\n        updateClassListLocalStorage()\r\n        //resets the selectedClass to the updated selectedClass. This runs when the user adds a new student.\r\n        setSelectedClass(classList.find((classInfo) => {\r\n            return classInfo.id === selectedClass.id;\r\n        }));\r\n    }, [classList])\r\n\r\n    if(selectedClass.roster.length === 0) {\r\n        return (\r\n            <div className='container'>\r\n                <nav>\r\n                    <span><Link to=\"/\">Home</Link></span>\r\n                </nav>\r\n                <h1>{selectedClass.id}</h1>\r\n                <div className='classContent'>\r\n                    <div className='roster'>\r\n                    <div className='student' onClick={() => setSelectedStudent(selectedClass.roster)}>All</div>\r\n                        <div className=\"modal studentModal\">\r\n                            <div className=\"modalContent\">\r\n                                <label>Student Name</label>\r\n                                <input type=\"text\" placeholder=\"\" className='studentNameInput'\r\n                                        onChange={(event) => setNewStudent(event.target.value)} />\r\n                            </div>\r\n                                <button onClick={() => addStudent()}>Add</button>\r\n                        </div>\r\n                        <button onClick={() => toggleStudentModal()}>Add Student</button>\r\n                    </div>\r\n                    <StudentDisplay selectedStudent={selectedStudent} roster={selectedClass.roster}\r\n                                    classList={classList} setClassList={setClassList} updateClassListLocalStorage={updateClassListLocalStorage}\r\n                                    deleteStudent={deleteStudent} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <nav>\r\n                <span><Link to=\"/\">Home</Link></span>\r\n            </nav>\r\n            <h1>{selectedClass.id}</h1>\r\n            <div className='classContent'>\r\n                <div className='roster'>\r\n                    <div className='student' onClick={() => displayMobileStudentDisplay(selectedClass.roster)}>All</div>\r\n                        {selectedClass.roster.map((student) => {\r\n                            return (\r\n                                <div>\r\n                                    <div key={student.name} className='student' onClick={() => displayMobileStudentDisplay(student)}>\r\n                                        {student.name}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        <button onClick={() => toggleStudentModal()}>Add Student</button>\r\n                        <div className=\"modal studentModal\">\r\n                            <div className=\"modalContent\">\r\n                                <label>Student Name</label>\r\n                                <input type=\"text\" placeholder=\"\" className='studentNameInput'\r\n                                        onChange={(event) => setNewStudent(event.target.value)} />\r\n                            </div>\r\n                                <button onClick={() => addStudent()}>Add</button>\r\n                        </div>\r\n                </div>\r\n                <StudentDisplay selectedStudent={selectedStudent} roster={selectedClass.roster}\r\n                                classList={classList} setClassList={setClassList} updateClassListLocalStorage={updateClassListLocalStorage}\r\n                                deleteStudent={deleteStudent} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import 'semantic-ui-css/semantic.min.css';\nimport ClassList from './components/ClassList';\nimport { useState } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport ClassPage from './components/ClassPage';\n\nfunction App() {\n  const [classList, setClassList] = useState(localStorage.getItem('classList') ? JSON.parse(localStorage.getItem('classList')) : [])\n\n  const updateClassListLocalStorage = () => {\n      setTimeout(() => localStorage.setItem('classList', JSON.stringify(classList)), 100)\n    }\n\n  const [selectedClass, setSelectedClass] = useState(localStorage.getItem('selectedClass') ? JSON.parse(localStorage.getItem('selectedClass')) : {});\n\n  // Sets the selectedClass value in local storage to equal to updated version of the selectedClass\n  const updateSelectedClassLocalStorage = (classId) => {\n    setTimeout(() => localStorage.setItem('selectedClass', JSON.stringify(classId)), 100)\n    localStorage.setItem('selectedClass', JSON.stringify(classId))\n  }\n\n    return (\n     <HashRouter basename='/'>\n       <Route exact path=\"/\" render={() => <ClassList classList={classList} setClassList={setClassList}\n                                            setSelectedClass={setSelectedClass} updateClassListLocalStorage={updateClassListLocalStorage}\n                                            updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />} />\n       <Route path='/classpage' render={() => <ClassPage selectedClass={selectedClass} setSelectedClass={setSelectedClass}\n                                            classList={classList} setClassList={setClassList} updateClassListLocalStorage={updateClassListLocalStorage}\n                                            updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />} />\n     </HashRouter>\n    );\n   }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}