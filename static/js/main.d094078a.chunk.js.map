{"version":3,"sources":["components/ClassCard.js","components/ClassList.js","components/StudentDisplay.js","components/ClassPage.js","App.js","index.js"],"names":["Class","classInfo","setSelectedClass","selectedClass","deleteClass","updateSelectedClassLocalStorage","className","id","roster","length","onClick","to","ClassList","classList","setClassList","updateClassListLocalStorage","useState","newClass","setNewClass","toggleAddClassModal","addClassModal","document","querySelector","style","display","addClass","console","log","value","newClassList","filter","useEffect","map","type","placeholder","onChange","event","target","StudentDisplay","selectedStudent","setSelectedStudent","calculateLevel","points","Math","floor","calculatePercentToNextLevel","undefined","name","Progress","progress","percent","studentName","studentClassId","classId","student","ClassPage","newStudent","setNewStudent","toggleStudentModal","studentModal","addStudent","studentNameInput","level","find","App","localStorage","getItem","JSON","parse","setTimeout","setItem","stringify","basename","exact","path","render","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d094078a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Class({classInfo, selectedClass, setSelectedClass, deleteClass, updateSelectedClassLocalStorage}) {\r\n    const selectClass = () => {\r\n        setSelectedClass(classInfo)\r\n        // Sets the localstorage value of selectedClass to the class that the user chose to view\r\n        updateSelectedClassLocalStorage(classInfo)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"content\">\r\n                <div className=\"header\">\r\n                    {classInfo.id}\r\n                </div>\r\n                <div className=\"meta\">\r\n                    Students: {classInfo.roster.length}\r\n                </div>\r\n                <div className=\"extra content\">\r\n                    <div className=\"ui two buttons\">\r\n                        <div className=\"ui basic green button\" onClick={() => selectClass()}><Link to=\"/classpage\">View Class</Link></div>\r\n                        <div className=\"ui basic red button\" onClick={() => deleteClass(classInfo.id)}>Delete Class</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport ClassCard from './ClassCard';\r\nimport './ClassList.css';\r\n\r\nexport default function ClassList({classList, setClassList, selectedClass, setSelectedClass, updateClassListLocalStorage, updateSelectedClassLocalStorage}) {\r\n    const [newClass, setNewClass] = useState('')\r\n\r\n    const toggleAddClassModal = () => {\r\n        //Create modal with form to enter class information\r\n        const addClassModal = document.querySelector('.classModal');\r\n        if (addClassModal.style.display !== \"block\") {\r\n            addClassModal.style.display = \"block\";\r\n          } else {\r\n            addClassModal.style.display = \"none\";\r\n          }\r\n    }\r\n\r\n    const addClass = () => {\r\n        //add class to classList\r\n        if(newClass !== '') {\r\n            console.log(classList)\r\n            setClassList([\r\n                ...classList,\r\n                {\r\n                    id: newClass,\r\n                    roster: []\r\n                }\r\n            ])\r\n            // clear input value\r\n            const classTitleInput = document.querySelector('.classTitleInput');\r\n            classTitleInput.value = '';\r\n            // hide addClassModal\r\n            toggleAddClassModal();\r\n            // Change newClass to an empty string\r\n            setNewClass('');\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const deleteClass = (id) => {\r\n        // create new array without the class that user wants to delete\r\n        const newClassList = classList.filter((classInfo) => classInfo.id !== id);\r\n        // set the new array without the deleted array as the classList\r\n        setClassList(newClassList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateClassListLocalStorage()\r\n    }, [classList])\r\n\r\n    if(classList !== null) {\r\n        return (\r\n            <div className=\"mainContent\">\r\n            <h1>Welcome, Teacher!</h1>\r\n                <div className=\"ui cards classListContainer\">\r\n                    {classList.map((classInfo) => {\r\n                        return (\r\n                            <ClassCard key={classInfo.id} classInfo={classInfo} deleteClass={deleteClass} \r\n                            selectedClass={selectedClass} setSelectedClass={setSelectedClass} updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className='addClassButton' onClick={() => toggleAddClassModal()}>\r\n                    Add Class\r\n                </button>\r\n                <div className=\"modal classModal\">\r\n                    <div className=\"modalContent\">\r\n                        <label>Class Title</label>\r\n                        <input type=\"text\" placeholder=\"(ex: AB2)\" className='classTitleInput'\r\n                                onChange={(event) => setNewClass(event.target.value)} />\r\n                    </div>\r\n                        <button onClick={() => addClass()}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"mainContent\">\r\n                <h1>Welcome, Teacher!</h1>\r\n                <button className='addClassButton' onClick={() => toggleAddClassModal()}>\r\n                    Add Class\r\n                </button>\r\n                <div className=\"modal classModal\">\r\n                    <div className=\"modalContent\">\r\n                        <label>Class Title</label>\r\n                        <input type=\"text\" placeholder=\"(ex: AB2)\" className='classTitleInput'\r\n                                onChange={(event) => setNewClass(event.target.value)} />\r\n                    </div>\r\n                        <button onClick={() => addClass()}>Add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './StudentDisplay.css';\r\nimport { Progress } from 'semantic-ui-react';\r\nimport { useEffect } from 'react';\r\n\r\n/* eslint-disable */\r\n//Disabled eslint because no-unused-expressions was not letting my program run\r\nexport default function StudentDisplay({selectedStudent, setSelectedStudent, roster, classList, setClassList, selectedClass, updateClassListLocalStorage }) {\r\n    const calculateLevel = (points) => {\r\n        return Math.floor(points/100)\r\n    }\r\n\r\n    const calculatePercentToNextLevel = (points) => {\r\n        return points - (calculateLevel(points)*100);\r\n    }\r\n\r\n    const addPoint = (studentName, studentClassId) => {\r\n            console.log(selectedClass)\r\n            // Set classList to update points of selectedStudent\r\n            setClassList(\r\n                classList.map((classInfo) => {\r\n                // Find the class with the same id as the selectedStudent\r\n                    if(classInfo.id === studentClassId) {\r\n                        // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                        // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                            return (\r\n                                {\r\n                                    roster: [\r\n                                        classInfo.roster.map((student) => {\r\n                                            student.name === studentName\r\n                                            ?\r\n                                                    {\r\n                                                        points: student.points++,\r\n                                                        ...student\r\n                                                    }\r\n                                            :\r\n                                                    { ...student }\r\n                                            }\r\n                                        )\r\n                                    ],\r\n                                    // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                    ...classInfo\r\n                                })\r\n                            } else {\r\n                                return (\r\n                                    { ...classInfo }\r\n                                )\r\n                            }\r\n                        }))\r\n                        updateClassListLocalStorage()\r\n        };\r\n\r\n    const subtractPoint = (studentName, studentClassId) => {\r\n        console.log(selectedClass)\r\n        // Set classList to update points of selectedStudent\r\n        setClassList(\r\n            classList.map((classInfo) => {\r\n            // Find the class with the same id as the selectedStudent\r\n                if(classInfo.id === studentClassId) {\r\n                    // HAD AN ISSUE WHERE I WAS REPLACING THE CLASSINFO WITH ONE STUDENT'S INFO\r\n                    // I MOVED THE ...CLASSINFO UNDER ROSTER AND THE ISSUE WAS FIXED\r\n                        return (\r\n                            {\r\n                                roster: [\r\n                                    classInfo.roster.map((student) => {\r\n                                        student.name === studentName\r\n                                        ?\r\n                                                {\r\n                                                    points: student.points--,\r\n                                                    ...student\r\n                                                }\r\n                                        :\r\n                                                { ...student }\r\n                                        }\r\n                                    )\r\n                                ],\r\n                                // MOVED THIS HERE INSTEAD OF ABOVE ROSTER\r\n                                ...classInfo\r\n                            })\r\n                        } else {\r\n                            return (\r\n                                { ...classInfo }\r\n                            )\r\n                        }\r\n                    }))\r\n                    updateClassListLocalStorage()\r\n    };\r\n\r\n    if(selectedStudent.name !== undefined) {\r\n        console.log(selectedStudent)\r\n        return (\r\n            <div className='studentDisplay'>\r\n                <h2>{calculateLevel(selectedStudent.points)}</h2>\r\n                    {selectedStudent.name}\r\n                    <Progress progress percent={calculatePercentToNextLevel(selectedStudent.points)} />\r\n                    <button onClick={() => subtractPoint(selectedStudent.name, selectedStudent.classId)}>-</button>\r\n                    <button onClick={() => addPoint(selectedStudent.name, selectedStudent.classId)}>+</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <div className='studentDisplay'>\r\n                {roster.map((student) => {\r\n                    return (\r\n                        <div key={student.name}>\r\n                            {calculateLevel(student.points)} {student.name} <Progress progress percent={calculatePercentToNextLevel(student.points)} />\r\n                        </div>\r\n                    )\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './ClassPage.css';\r\nimport { useState, useEffect } from 'react';\r\nimport StudentDisplay from './StudentDisplay';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function ClassPage({selectedClass, setSelectedClass, classList, setClassList, updateClassListLocalStorage}) {\r\n    const [newStudent, setNewStudent] = useState('');\r\n    const [selectedStudent, setSelectedStudent] = useState({});\r\n    \r\n    const toggleStudentModal = () => {\r\n        const studentModal = document.querySelector('.studentModal');\r\n        if(studentModal.style.display !== 'block') {\r\n            studentModal.style.display = 'block';\r\n        } else {\r\n            studentModal.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    const addStudent = () => {\r\n        const studentNameInput = document.querySelector('.studentNameInput');\r\n        // only add student if input is not blank\r\n        if(studentNameInput.value !== '') {\r\n            // Set classList to include new student in the selectedClass\r\n            setClassList(\r\n                classList.map((classInfo) => \r\n                // Find the class with the same id as the selectedClass being displayed on this page\r\n                    classInfo.id === selectedClass.id \r\n                    ? {\r\n                        ...classInfo,\r\n                        roster: [\r\n                            // Add the new student to the roster\r\n                            ...classInfo.roster,\r\n                            {\r\n                                name: newStudent,\r\n                                points: 0,\r\n                                level: 0,\r\n                                classId: selectedClass.id\r\n                            }\r\n                        ]\r\n                    }\r\n                    : { ...classInfo }\r\n                )\r\n            );\r\n            // Set input text to blank\r\n            studentNameInput.value = '';\r\n            setNewStudent('');\r\n            updateClassListLocalStorage()\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Whenever classList is updated, update selectedClass for any changes in the roster (when a new student is added)\r\n        updateClassListLocalStorage()\r\n        //resets the selectedClass to the updated selectedClass. This runs when the user adds a new student.\r\n        setSelectedClass(classList.find((classInfo) => {\r\n            return classInfo.id === selectedClass.id;\r\n        }));\r\n    }, [classList])\r\n\r\n    if(selectedClass.roster.length === 0) {\r\n        return (\r\n            <div className='container'>\r\n                <nav>\r\n                    <span><Link to=\"/\">Home</Link></span>\r\n                </nav>\r\n                <h1>{selectedClass.id}</h1>\r\n                <div className='classContent'>\r\n                    <div className='roster'>\r\n                    <div className='student' onClick={() => setSelectedStudent(selectedClass.roster)}>All</div>\r\n                        <div className=\"modal studentModal\">\r\n                            <div className=\"modalContent\">\r\n                                <label>Student Name</label>\r\n                                <input type=\"text\" placeholder=\"\" className='studentNameInput'\r\n                                        onChange={(event) => setNewStudent(event.target.value)} />\r\n                            </div>\r\n                                <button onClick={() => addStudent()}>Add</button>\r\n                        </div>\r\n                        <button onClick={() => toggleStudentModal()}>Add Student</button>\r\n                    </div>\r\n                    <StudentDisplay selectedStudent={selectedStudent} setSelectedStudent={setSelectedStudent} roster={selectedClass.roster}\r\n                                    classList={classList} setClassList={setClassList} selectedClass={selectedClass} updateClassListLocalStorage={updateClassListLocalStorage} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='container'>\r\n            <nav>\r\n                <span><Link to=\"/\">Home</Link></span>\r\n            </nav>\r\n            <h1>{selectedClass.id}</h1>\r\n            <div className='classContent'>\r\n                <div className='roster'>\r\n                <div className='student' onClick={() => setSelectedStudent(selectedClass.roster)}>All</div>\r\n                    {selectedClass.roster.map((student) => {\r\n                        return (\r\n                            <div key={student.name} className='student' onClick={() => setSelectedStudent(student)}>{student.name}</div>\r\n                        )\r\n                    })}\r\n                    <div className=\"modal studentModal\">\r\n                        <div className=\"modalContent\">\r\n                            <label>Student Name</label>\r\n                            <input type=\"text\" placeholder=\"\" className='studentNameInput'\r\n                                    onChange={(event) => setNewStudent(event.target.value)} />\r\n                        </div>\r\n                            <button onClick={() => addStudent()}>Add</button>\r\n                    </div>\r\n                    <button onClick={() => toggleStudentModal()}>Add Student</button>\r\n                </div>\r\n                <StudentDisplay selectedStudent={selectedStudent} setSelectedStudent={setSelectedStudent} roster={selectedClass.roster}\r\n                                classList={classList} setClassList={setClassList} selectedClass={selectedClass} updateClassListLocalStorage={updateClassListLocalStorage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import 'semantic-ui-css/semantic.min.css';\nimport ClassList from './components/ClassList';\nimport { useState, useEffect } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport ClassPage from './components/ClassPage';\n\nfunction App() {\n  const [classList, setClassList] = useState(localStorage.getItem('classList') ? JSON.parse(localStorage.getItem('classList')) : [])\n\n  const updateClassListLocalStorage = () => {\n      setTimeout(() => localStorage.setItem('classList', JSON.stringify(classList)), 100)\n    }\n\n  const [selectedClass, setSelectedClass] = useState(localStorage.getItem('selectedClass') ? JSON.parse(localStorage.getItem('selectedClass')) : {});\n\n  // Sets the selectedClass value in local storage to equal to updated version of the selectedClass\n  const updateSelectedClassLocalStorage = (classId) => {\n    setTimeout(() => localStorage.setItem('selectedClass', JSON.stringify(classId)), 100)\n    localStorage.setItem('selectedClass', JSON.stringify(classId))\n  }\n\n    return (\n     <HashRouter basename='/'>\n       <Route exact path=\"/\" render={() => <ClassList classList={classList} setClassList={setClassList}\n                                            setSelectedClass={setSelectedClass} updateClassListLocalStorage={updateClassListLocalStorage}\n                                            updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />} />\n       <Route path='/classpage' render={() => <ClassPage selectedClass={selectedClass} setSelectedClass={setSelectedClass}\n                                            classList={classList} setClassList={setClassList} updateClassListLocalStorage={updateClassListLocalStorage}\n                                            updateSelectedClassLocalStorage={updateSelectedClassLocalStorage} />} />\n     </HashRouter>\n    );\n   }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}